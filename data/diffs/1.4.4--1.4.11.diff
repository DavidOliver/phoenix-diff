diff --git assets/package.json assets/package.json
index a4ba0e7..48633fd 100644
--- assets/package.json
+++ assets/package.json
@@ -16,9 +16,9 @@
     "copy-webpack-plugin": "^4.5.0",
     "css-loader": "^2.1.1",
     "mini-css-extract-plugin": "^0.4.0",
-    "optimize-css-assets-webpack-plugin": "^4.0.0",
-    "uglifyjs-webpack-plugin": "^1.2.4",
+    "optimize-css-assets-webpack-plugin": "^5.0.1",
+    "terser-webpack-plugin": "^1.1.0",
     "webpack": "4.4.0",
-    "webpack-cli": "^2.0.10"
+    "webpack-cli": "^3.3.2"
   }
 }
diff --git assets/webpack.config.js assets/webpack.config.js
index 45ab14f..4569a84 100644
--- assets/webpack.config.js
+++ assets/webpack.config.js
@@ -1,19 +1,19 @@
 const path = require('path');
 const glob = require('glob');
 const MiniCssExtractPlugin = require('mini-css-extract-plugin');
-const UglifyJsPlugin = require('uglifyjs-webpack-plugin');
+const TerserPlugin = require('terser-webpack-plugin');
 const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');
 const CopyWebpackPlugin = require('copy-webpack-plugin');
 
 module.exports = (env, options) => ({
   optimization: {
     minimizer: [
-      new UglifyJsPlugin({ cache: true, parallel: true, sourceMap: false }),
+      new TerserPlugin({ cache: true, parallel: true, sourceMap: false }),
       new OptimizeCSSAssetsPlugin({})
     ]
   },
   entry: {
-      './js/app.js': ['./js/app.js'].concat(glob.sync('./vendor/**/*.js'))
+    './js/app.js': glob.sync('./vendor/**/*.js').concat(['./js/app.js'])
   },
   output: {
     filename: 'app.js',
diff --git config/prod.exs config/prod.exs
index ead09c8..60dd11b 100644
--- config/prod.exs
+++ config/prod.exs
@@ -50,16 +50,6 @@ config :logger, level: :info
 #
 # Check `Plug.SSL` for all available options in `force_ssl`.
 
-# ## Using releases (Elixir v1.9+)
-#
-# If you are doing OTP releases, you need to instruct Phoenix
-# to start each relevant endpoint:
-#
-#     config :sample_app, SampleAppWeb.Endpoint, server: true
-#
-# Then you can assemble a release by calling `mix release`.
-# See `mix help release` for more information.
-
 # Finally import the config/prod.secret.exs which loads secrets
 # and configuration from environment variables.
 import_config "prod.secret.exs"
diff --git config/prod.secret.exs config/prod.secret.exs
index dc5b6f0..b7149ee 100644
--- config/prod.secret.exs
+++ config/prod.secret.exs
@@ -1,8 +1,7 @@
-# In this file, we load production configuration and
-# secrets from environment variables. You can also
-# hardcode secrets, although such is generally not
-# recommended and you have to remember to add this
-# file to your .gitignore.
+# In this file, we load production configuration and secrets
+# from environment variables. You can also hardcode secrets,
+# although such is generally not recommended and you have to
+# remember to add this file to your .gitignore.
 use Mix.Config
 
 database_url =
@@ -27,3 +26,13 @@ secret_key_base =
 config :sample_app, SampleAppWeb.Endpoint,
   http: [:inet6, port: String.to_integer(System.get_env("PORT") || "4000")],
   secret_key_base: "aaaaaaaa"
+
+# ## Using releases (Elixir v1.9+)
+#
+# If you are doing OTP releases, you need to instruct Phoenix
+# to start each relevant endpoint:
+#
+#     config :sample_app, SampleAppWeb.Endpoint, server: true
+#
+# Then you can assemble a release by calling `mix release`.
+# See `mix help release` for more information.
diff --git lib/sample_app_web/endpoint.ex lib/sample_app_web/endpoint.ex
index 92ca519..b8aa4a6 100644
--- lib/sample_app_web/endpoint.ex
+++ lib/sample_app_web/endpoint.ex
@@ -24,7 +24,7 @@ defmodule SampleAppWeb.Endpoint do
   end
 
   plug Plug.RequestId
-  plug Plug.Logger
+  plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]
 
   plug Plug.Parsers,
     parsers: [:urlencoded, :multipart, :json],
diff --git mix.exs mix.exs
index d5d72b6..d37b482 100644
--- mix.exs
+++ mix.exs
@@ -33,10 +33,10 @@ defmodule SampleApp.MixProject do
   # Type `mix help deps` for examples and options.
   defp deps do
     [
-      {:phoenix, "~> 1.4.4"},
+      {:phoenix, "~> 1.4.11"},
       {:phoenix_pubsub, "~> 1.1"},
       {:phoenix_ecto, "~> 4.0"},
-      {:ecto_sql, "~> 3.0"},
+      {:ecto_sql, "~> 3.1"},
       {:postgrex, ">= 0.0.0"},
       {:phoenix_html, "~> 2.11"},
       {:phoenix_live_reload, "~> 1.2", only: :dev},
diff --git test/support/conn_case.ex test/support/conn_case.ex
index 3eb09ac..fbe0af6 100644
--- test/support/conn_case.ex
+++ test/support/conn_case.ex
@@ -8,9 +8,11 @@ defmodule SampleAppWeb.ConnCase do
   to build common data structures and query the data layer.
 
   Finally, if the test case interacts with the database,
-  it cannot be async. For this reason, every test runs
-  inside a transaction which is reset at the beginning
-  of the test unless the test case is marked as async.
+  we enable the SQL sandbox, so changes done to the database
+  are reverted at the end of every test. If you are using
+  PostgreSQL, you can even run database tests asynchronously
+  by setting `use SampleAppWeb.ConnCase, async: true`, although
+  this option is not recommendded for other databases.
   """
 
   use ExUnit.CaseTemplate
diff --git test/support/data_case.ex test/support/data_case.ex
index a71a146..42988a0 100644
--- test/support/data_case.ex
+++ test/support/data_case.ex
@@ -7,9 +7,11 @@ defmodule SampleApp.DataCase do
   your tests.
 
   Finally, if the test case interacts with the database,
-  it cannot be async. For this reason, every test runs
-  inside a transaction which is reset at the beginning
-  of the test unless the test case is marked as async.
+  we enable the SQL sandbox, so changes done to the database
+  are reverted at the end of every test. If you are using
+  PostgreSQL, you can even run database tests asynchronously
+  by setting `use SampleAppWeb.DataCase, async: true`, although
+  this option is not recommendded for other databases.
   """
 
   use ExUnit.CaseTemplate
@@ -45,8 +47,8 @@ defmodule SampleApp.DataCase do
   """
   def errors_on(changeset) do
     Ecto.Changeset.traverse_errors(changeset, fn {message, opts} ->
-      Enum.reduce(opts, message, fn {key, value}, acc ->
-        String.replace(acc, "%{#{key}}", to_string(value))
+      Regex.replace(~r"%{(\w+)}", message, fn _, key ->
+        opts |> Keyword.get(String.to_existing_atom(key), key) |> to_string()
       end)
     end)
   end
