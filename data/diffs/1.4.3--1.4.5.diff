diff --git .gitignore .gitignore
index 7a97fd7..f190c9b 100644
--- .gitignore
+++ .gitignore
@@ -32,11 +32,3 @@ npm-debug.log
 # we ignore priv/static. You may want to comment
 # this depending on your deployment strategy.
 /priv/static/
-
-# Files matching config/*.secret.exs pattern contain sensitive
-# data and you should not commit them into version control.
-#
-# Alternatively, you may comment the line below and commit the
-# secrets files as long as you replace their contents by environment
-# variables.
-/config/*.secret.exs
diff --git config/dev.exs config/dev.exs
index aaede44..217905f 100644
--- config/dev.exs
+++ config/dev.exs
@@ -1,5 +1,14 @@
 use Mix.Config
 
+# Configure your database
+config :sample_app, SampleApp.Repo,
+  username: "postgres",
+  password: "postgres",
+  database: "sample_app_dev",
+  hostname: "localhost",
+  show_sensitive_data_on_connection_error: true,
+  pool_size: 10
+
 # For development, we disable any cache and enable
 # debugging and code reloading.
 #
@@ -65,11 +74,3 @@ config :phoenix, :stacktrace_depth, 20
 
 # Initialize plugs at runtime for faster development compilation
 config :phoenix, :plug_init_mode, :runtime
-
-# Configure your database
-config :sample_app, SampleApp.Repo,
-  username: "postgres",
-  password: "postgres",
-  database: "sample_app_dev",
-  hostname: "localhost",
-  pool_size: 10
diff --git config/prod.exs config/prod.exs
index 0d797f4..ead09c8 100644
--- config/prod.exs
+++ config/prod.exs
@@ -10,7 +10,6 @@ use Mix.Config
 # which you should run after static files are built and
 # before starting your production server.
 config :sample_app, SampleAppWeb.Endpoint,
-  http: [:inet6, port: System.get_env("PORT") || 4000],
   url: [host: "example.com", port: 80],
   cache_static_manifest: "priv/static/cache_manifest.json"
 
@@ -51,21 +50,16 @@ config :logger, level: :info
 #
 # Check `Plug.SSL` for all available options in `force_ssl`.
 
-# ## Using releases (distillery)
+# ## Using releases (Elixir v1.9+)
 #
 # If you are doing OTP releases, you need to instruct Phoenix
-# to start the server for all endpoints:
-#
-#     config :phoenix, :serve_endpoints, true
-#
-# Alternatively, you can configure exactly which server to
-# start per endpoint:
+# to start each relevant endpoint:
 #
 #     config :sample_app, SampleAppWeb.Endpoint, server: true
 #
-# Note you can't rely on `System.get_env/1` when using releases.
-# See the releases documentation accordingly.
+# Then you can assemble a release by calling `mix release`.
+# See `mix help release` for more information.
 
-# Finally import the config/prod.secret.exs which should be versioned
-# separately.
+# Finally import the config/prod.secret.exs which loads secrets
+# and configuration from environment variables.
 import_config "prod.secret.exs"
diff --git config/prod.secret.exs config/prod.secret.exs
index a62a8db..dc5b6f0 100644
--- config/prod.secret.exs
+++ config/prod.secret.exs
@@ -1,19 +1,29 @@
+# In this file, we load production configuration and
+# secrets from environment variables. You can also
+# hardcode secrets, although such is generally not
+# recommended and you have to remember to add this
+# file to your .gitignore.
 use Mix.Config
 
-# In this file, we keep production configuration that
-# you'll likely want to automate and keep away from
-# your version control system.
-#
-# You should document the content of this
-# file or create a script for recreating it, since it's
-# kept out of version control and might be hard to recover
-# or recreate for your teammates (or yourself later on).
-config :sample_app, SampleAppWeb.Endpoint,
-  secret_key_base: "aaaaaaaa"
+database_url =
+  System.get_env("DATABASE_URL") ||
+    raise """
+    environment variable DATABASE_URL is missing.
+    For example: ecto://USER:PASS@HOST/DATABASE
+    """
 
-# Configure your database
 config :sample_app, SampleApp.Repo,
-  username: "postgres",
-  password: "postgres",
-  database: "sample_app_prod",
-  pool_size: 15
+  # ssl: true,
+  url: database_url,
+  pool_size: String.to_integer(System.get_env("POOL_SIZE") || "10")
+
+secret_key_base =
+  System.get_env("SECRET_KEY_BASE") ||
+    raise """
+    environment variable SECRET_KEY_BASE is missing.
+    You can generate one by calling: mix phx.gen.secret
+    """
+
+config :sample_app, SampleAppWeb.Endpoint,
+  http: [:inet6, port: String.to_integer(System.get_env("PORT") || "4000")],
+  secret_key_base: "aaaaaaaa"
diff --git config/test.exs config/test.exs
index 166e50f..31fdfee 100644
--- config/test.exs
+++ config/test.exs
@@ -1,5 +1,13 @@
 use Mix.Config
 
+# Configure your database
+config :sample_app, SampleApp.Repo,
+  username: "postgres",
+  password: "postgres",
+  database: "sample_app_test",
+  hostname: "localhost",
+  pool: Ecto.Adapters.SQL.Sandbox
+
 # We don't run a server during test. If one is required,
 # you can enable the server option below.
 config :sample_app, SampleAppWeb.Endpoint,
@@ -8,11 +16,3 @@ config :sample_app, SampleAppWeb.Endpoint,
 
 # Print only warnings and errors during test
 config :logger, level: :warn
-
-# Configure your database
-config :sample_app, SampleApp.Repo,
-  username: "postgres",
-  password: "postgres",
-  database: "sample_app_test",
-  hostname: "localhost",
-  pool: Ecto.Adapters.SQL.Sandbox
diff --git mix.exs mix.exs
index dd14c6d..9269afe 100644
--- mix.exs
+++ mix.exs
@@ -33,7 +33,7 @@ defmodule SampleApp.MixProject do
   # Type `mix help deps` for examples and options.
   defp deps do
     [
-      {:phoenix, "~> 1.4.3"},
+      {:phoenix, "~> 1.4.5"},
       {:phoenix_pubsub, "~> 1.1"},
       {:phoenix_ecto, "~> 4.0"},
       {:ecto_sql, "~> 3.0"},
diff --git test/support/data_case.ex test/support/data_case.ex
index a71a146..7ad0f52 100644
--- test/support/data_case.ex
+++ test/support/data_case.ex
@@ -45,8 +45,8 @@ defmodule SampleApp.DataCase do
   """
   def errors_on(changeset) do
     Ecto.Changeset.traverse_errors(changeset, fn {message, opts} ->
-      Enum.reduce(opts, message, fn {key, value}, acc ->
-        String.replace(acc, "%{#{key}}", to_string(value))
+      Regex.replace(~r"%{(\w+)}", message, fn _, key ->
+        opts |> Map.get(String.to_existing_atom(key), key) |> to_string()
       end)
     end)
   end
